<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>my cup of tea</description>
    <link>javabean.ru//</link>
    <atom:link href="javabean.ru//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 22 Sep 2017 15:24:29 +0200</pubDate>
    <lastBuildDate>Fri, 22 Sep 2017 15:24:29 +0200</lastBuildDate>
    <generator>Jekyll v3.6.0</generator>
    
      <item>
        <title>The Well-Grounded Rubyist book review</title>
        <description>&lt;p&gt;&lt;img class=&quot;alignleft size-medium&quot; src=&quot;https://images-na.ssl-images-amazon.com/images/I/51qtp4NzjRL._SX258_BO1,204,203,200_.jpg&quot; width=&quot;260&quot; height=&quot;325&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ruby (along with Python and Javascript) is a kind of a language that allows you to use it without dropping a sweat to study it. That’s what has happened to me. I’ve been using Ruby for a while, but haven’t read anything but blog posts about it.&lt;/p&gt;

&lt;p&gt;This book gave me a good momentum to start using some of the Ruby features I (i.e. Fibers ) that I was  completely unaware before, though the amount of input it provides is not overwhelming which helps you to digest this book over a weekend.&lt;/p&gt;

&lt;p&gt;That’s a good starter for anyone willing to start coding in Ruby 2.1, lots of examples are outdated if you aim for Ruby 2.4+&lt;/p&gt;

&lt;p&gt;My score 4/5&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
        <pubDate>Tue, 05 Sep 2017 12:16:46 +0200</pubDate>
        <link>javabean.ru//?p=961</link>
        <guid isPermaLink="true">javabean.ru//?p=961</guid>
        
        
        <category>books</category>
        
      </item>
    
      <item>
        <title>Introducing Python book review</title>
        <description>&lt;p&gt;&lt;img class=&quot;alignleft &quot; src=&quot;http://images.gr-assets.com/books/1368812432l/17912929.jpg&quot; width=&quot;159&quot; height=&quot;209&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is actually the first book about Python I’ve read even though I’ve used it extensively throughout the years.&lt;/p&gt;

&lt;p&gt;My perception that this book proves is that Pythonistas are usually not programmers by trade, they’d come to programming either due to a lucky coincidence or by taking a wrong turn on the road of career hopping.&lt;/p&gt;

&lt;p&gt;This book has promised to give a broad look on the Python’s ecosystem, it actually delivers on what it promises. But this look is so shallow that I can’t recommend this book for those who’s willing to get a deep dive into Python on a weekend. The technical details it gives look like author’s waving the hands in the air with no actual proof that I’m used to in Scala and Java books.&lt;/p&gt;

&lt;p&gt;Good book, but I can’t recommend it to any professional programmer who’s used to technical/programming/mathematical books.&lt;/p&gt;

&lt;p&gt;Score 3/5&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;aligncenter size-medium&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/3_stars.svg/2000px-3_stars.svg.png&quot; width=&quot;2000&quot; height=&quot;411&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Jul 2017 15:52:50 +0200</pubDate>
        <link>javabean.ru//?p=954</link>
        <guid isPermaLink="true">javabean.ru//?p=954</guid>
        
        
        <category>books</category>
        
      </item>
    
      <item>
        <title>Continious Delivery book review</title>
        <description>&lt;p&gt;&lt;img class=&quot;alignleft &quot; src=&quot;https://martinfowler.com/books/continuousDelivery.jpg&quot; width=&quot;196&quot; height=&quot;258&quot; /&gt;This book is considered a cornerstone of the DevOps movement. In my opinion, it might be that in the very beginning, but currently most of the concepts that it presents are obvious and outdated.&lt;/p&gt;

&lt;p&gt;I will recommend it to be read to someone who’s new in the DevOps community, but if you’ve got a few years of experience in the area under your belt I would   not.&lt;/p&gt;

&lt;p&gt;It’s nice to have all good concepts under one cover, but reading a 400-pages long book that will tell you the history of GIT and SVN is pointless in my opinion. Most of the ideas presented in the book could be wrapped in one long yet succinct blog post.&lt;/p&gt;

&lt;p&gt;My score 3/5&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;aligncenter size-medium&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/3_stars.svg/2000px-3_stars.svg.png&quot; width=&quot;2000&quot; height=&quot;411&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Jun 2017 10:25:39 +0200</pubDate>
        <link>javabean.ru//?p=948</link>
        <guid isPermaLink="true">javabean.ru//?p=948</guid>
        
        
        <category>books</category>
        
        <category>DevOps</category>
        
      </item>
    
      <item>
        <title>The DevOps Handbook book review</title>
        <description>&lt;p&gt;&lt;img class=&quot;alignleft &quot; src=&quot;http://lh3.googleusercontent.com/ZE_FlRhIjlfueaWLxIK0_eFkUgJ9rEc2wg-akVq_D9ghFk4i3BWA52tdv5mZ4rVyDYR38hPIC-j-ZT3uY0IK=s0&quot; width=&quot;283&quot; height=&quot;433&quot; /&gt;This book actually reminds me of the book “Release it ” but with much less emphasis on actual technical patterns but with a stronger accent on soft skills.&lt;/p&gt;

&lt;p&gt;It’s also complimentary to the “Phoenix Project” written by the same authors.&lt;/p&gt;

&lt;p&gt;If you’ve skipped the “Phoenix Project” or you don’t like to read the novels, like I do, I would recommend you to start with this book as it has much more momentum than the first book.&lt;/p&gt;

&lt;p&gt;It has a bunch of great inspiring examples of successes from the companies that have embarked on the “DevOps journey” which to me is the best part of this book. Also the book is relatively recent therefore a lot of its advices are quite innovative and might be even disturbing to some.&lt;/p&gt;

&lt;p&gt;My score 4/5&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;aligncenter size-medium&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/4_stars.svg/1280px-4_stars.svg.png&quot; width=&quot;1280&quot; height=&quot;263&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 30 May 2017 22:18:13 +0200</pubDate>
        <link>javabean.ru//?p=944</link>
        <guid isPermaLink="true">javabean.ru//?p=944</guid>
        
        
        <category>books</category>
        
        <category>DevOps</category>
        
      </item>
    
      <item>
        <title>939</title>
        <description>&lt;p&gt;&lt;img class=&quot;alignleft &quot; src=&quot;https://imagery.pragprog.com/products/323/jkthp.jpg?1363811503&quot; width=&quot;249&quot; height=&quot;299&quot; /&gt;Sometimes I’m late for some of the most important events in my life. Hopefully, health is not the issue that I’ve missed. Self-awareness and consciousness have always been a nice thing to have under your belt.&lt;/p&gt;

&lt;p&gt;This book helps to improve those skills by giving you a nice reference for all the good things you need to be aware of that might either help you to advance or suffer as a human being.&lt;/p&gt;

&lt;p&gt;This book is nothing more than a composition of blog posts, though it gives your a nice system as a set of goals you can follow along with a companion mobile app. In my opinion, it’s much nicer to have good ideas under one cover than scattered around the Internet.&lt;/p&gt;

&lt;p&gt;My score 4/5 due to how actual this topic is for myself&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;aligncenter size-medium&quot; src=&quot;http://static.wixstatic.com/media/04d516_0c2c25a17aba4df797711d4610e10fb7~mv2.jpg&quot; width=&quot;5138&quot; height=&quot;1023&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 18 May 2017 23:33:01 +0200</pubDate>
        <link>javabean.ru//?p=939</link>
        <guid isPermaLink="true">javabean.ru//?p=939</guid>
        
        
        <category>books</category>
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>&amp;#8220;Release it&amp;#8221; book review</title>
        <description>&lt;p&gt;&lt;img class=&quot;alignleft &quot; src=&quot;https://imagery.pragprog.com/products/93/mnee.jpg?1298589747&quot; width=&quot;254&quot; height=&quot;305&quot; /&gt;There’s a relatively short list of books I would like to keep on my desk. Most often those books are references and a composition of famous quotes. After I’ve read this chap I’d like to have it on my work desk at any moment.&lt;/p&gt;

&lt;p&gt;This book is a perfect mix of lots of useful technical insights, practices and recommendations got from the author’s hard-earned experience combined with some of the soft-skills you need to make your software and its maintenance (which as the author states costs more than the initial 1.0 version) as smooth as possible with as much of interrupted sleep as you could possibly get.&lt;/p&gt;

&lt;p&gt;The book is definitely outdated, some of the references to particular technologies look odd and obvious (if not even funny). Nevertheless, I will put this book in one row with the “SRE book” &amp;amp; “Project Phoenix” as it combines them both.&lt;/p&gt;

&lt;p&gt;My score is 5/5&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;aligncenter size-medium&quot; src=&quot;http://childrenscampus.com/cms/wp-content/uploads/five-stars.png&quot; width=&quot;905&quot; height=&quot;238&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 14 May 2017 23:22:41 +0200</pubDate>
        <link>javabean.ru//?p=937</link>
        <guid isPermaLink="true">javabean.ru//?p=937</guid>
        
        
        <category>books</category>
        
        <category>DevOps</category>
        
      </item>
    
      <item>
        <title>The phoenix project book review</title>
        <description>&lt;p&gt;&lt;img class=&quot;alignleft &quot; src=&quot;https://images-na.ssl-images-amazon.com/images/I/914-sUgELZL.jpg&quot; width=&quot;150&quot; height=&quot;224&quot; /&gt;That was the first non-technical book I’ve read for the last few years. At first I was really struggling to go through the first one hundred pages as I was constantly bored due to absolute lack of any technical details. However, a good book is always a good book even though it’s an IT-concerned novel.&lt;/p&gt;

&lt;p&gt;What I like in this book is how it reminds some of the actual projects I’ve worked. I’m not sure whether the final solution that this book presents will be suitable for anyone but still it gives a lot of food for thought how to improve the inner processes and the workflow in any IT organization. If you like “The Deadline” by Tom DeMarco you would love this book.&lt;/p&gt;

&lt;p&gt;My score is 3/5, simply because I don’t like novels.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;aligncenter size-medium&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/3_stars.svg/2000px-3_stars.svg.png&quot; width=&quot;2000&quot; height=&quot;411&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Apr 2017 00:16:52 +0200</pubDate>
        <link>javabean.ru//?p=933</link>
        <guid isPermaLink="true">javabean.ru//?p=933</guid>
        
        
        <category>books</category>
        
      </item>
    
      <item>
        <title>What the newly coming Java 9 will bring to your Scala?</title>
        <description>&lt;h3 id=&quot;abstract&quot;&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Java 9 is supposedly coming in July this year. All of its features are already discussed, however, as it was in the past everyone will wait until the minor version 1 or even 2 will be released for the wide adoption to take place. What’s even more important that usually OpenJDK community doesn’t care a lot about the JVM languages if it’s not Java. Those Clojure developers who used to install every JVM update know what I’m talking about.&lt;/p&gt;

&lt;p&gt;Let’s quickly reiterate what are the major JVM/Java features that might affect (or have already affected, according to the current b168 build) Scala and its ecosystem as Scala has currently its prime-time with a lot of business users unwilling to break their core apps due to a new version of the platform its built upon.&lt;/p&gt;

&lt;p&gt;In my opinion the list of features should look like that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JShell&lt;/li&gt;
  &lt;li&gt; Compact strings&lt;/li&gt;
  &lt;li&gt; Variable type inference&lt;/li&gt;
  &lt;li&gt; Factory methods for making immutable collections&lt;/li&gt;
  &lt;li&gt; ECMA6 features in Nashhorn&lt;/li&gt;
  &lt;li&gt; Http/2 client&lt;/li&gt;
  &lt;li&gt; Private methods in interfaces&lt;/li&gt;
  &lt;li&gt; Reactive streams&lt;/li&gt;
  &lt;li&gt; Multi-release jars&lt;/li&gt;
  &lt;li&gt; AOT Compilation&lt;/li&gt;
  &lt;li&gt;G1 Garbage collector&lt;/li&gt;
  &lt;li&gt;Modules&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me quickly go through that list one by one to explain what in  my opinion will be the pros and cons of every feature.&lt;/p&gt;

&lt;h3 id=&quot;jshell&quot;&gt;JShell&lt;/h3&gt;

&lt;p&gt;If someone still recalls what was the &lt;a href=&quot;https://en.wikipedia.org/wiki/BeanShell&quot;&gt;Bean&lt;/a&gt;Shell back in the days when there still was a need to write scripts in java due to lack of robust scripting language for the JVM let me assure you that’s not it though a full-rethought fork of it that has gone through multiple JCP improvements. It’s not as versatile as running&lt;/p&gt;

&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;java&quot;&gt; sbt console&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;on your project with all your dependencies and Scala code compiled being already added to the classpath, but hopefully Java build tools could improve that and make this REPL as useful as it is  for Scala projects.&lt;/p&gt;

&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;java&quot;&gt;import java.security.Security

Security.setProperty(&quot;crypto.policy&quot;, &quot;unlimited&quot;)&lt;/pre&gt;

&lt;p&gt;Notice the lack of semicolons, but be aware that you still need to use them if you plan to write a function.&lt;/p&gt;

&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;java&quot;&gt;void println(String arg) {
    System.out.println(arg);
}

println(&quot;Hello Java&quot;)&lt;/pre&gt;

&lt;h3 id=&quot;compact-strings&quot;&gt;&lt;strong&gt;Compact strings&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Did you like that every string is a char array? I didn’t as even considering a string pool having a lot of strings was costly, made your heap unnecessarily large and  made your &lt;del&gt;unicorn&lt;/del&gt; garbage collector cry since why should it be bothered with cleaning of … strings?&lt;/p&gt;

&lt;div style=&quot;width: 341px&quot; class=&quot;wp-caption aligncenter&quot;&gt;
  &lt;img src=&quot;http://img2.wikia.nocookie.net/__cb20130126191858/mlp/es/images/1/19/Crying_rainbow_dash_by_keanno-d49w8t2_large.gif&quot; alt=&quot;&quot; width=&quot;331&quot; height=&quot;241&quot; /&gt;
  
  &lt;p class=&quot;wp-caption-text&quot;&gt;
    GC has to stop the world due to abundance of strings
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Since JDK 9 your strings will become… arrays of bytes plus an encoding flag.&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&quot;http://cr.openjdk.java.net/~shade/density/state-of-string-density-v1.txt&quot;&gt;findings&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=_evzaAkd594&quot;&gt;made&lt;/a&gt; by the JDK committee the lower footprint will make your &lt;del&gt;unicorn&lt;/del&gt; garbage collector dance of joy.&lt;/p&gt;

&lt;div style=&quot;width: 174px&quot; class=&quot;wp-caption aligncenter&quot;&gt;
  &lt;img src=&quot;https://mlpforums.com/uploads/post_images/sig-4639785.228523__UNOPT__safe_rainbow-dash.gif.gif&quot; alt=&quot;&quot; width=&quot;164&quot; height=&quot;197&quot; /&gt;
  
  &lt;p class=&quot;wp-caption-text&quot;&gt;
    The GC is waiting for more garbage
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Let me illustrate it with a slide from a great &lt;a href=&quot;https://shipilev.net/talks/jfokus-Feb2016-lord-of-the-strings.pdf&quot;&gt;presentation&lt;/a&gt; done by Aleksey Shipilev at JFokus.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://javabean.ru/wp-content/uploads/2017/04/Screen-Shot-2017-04-14-at-11.03.03.png&quot;&gt;&lt;img class=&quot;wp-image-923 aligncenter&quot; src=&quot;http://javabean.ru/wp-content/uploads/2017/04/Screen-Shot-2017-04-14-at-11.03.03-300x75.png&quot; alt=&quot;&quot; width=&quot;408&quot; height=&quot;102&quot; srcset=&quot;http://localhost/wp-content/uploads/2017/04/Screen-Shot-2017-04-14-at-11.03.03-300x75.png 300w, http://localhost/wp-content/uploads/2017/04/Screen-Shot-2017-04-14-at-11.03.03.png 471w&quot; sizes=&quot;(max-width: 408px) 100vw, 408px&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;variable-type-inference&quot;&gt;Variable type inference&lt;/h3&gt;

&lt;p&gt;You’re finally allowed to omit the type while allocating a new Java variable, like you know… in Scala.&lt;/p&gt;

&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;java&quot;&gt;var myCounter = 0L

val myName = &quot;Adam&quot;&lt;/pre&gt;

&lt;p&gt;Sorry, just kidding. It’s not yet there. It’s the most anticipated JEP for me personally that was proposed last year by the JCP, even though it was &lt;a href=&quot;http://openjdk.java.net/jeps/286&quot;&gt;authored&lt;/a&gt; by Brian Goetz there’s no final decision yet will it be a part of Java 10 or Java XXL (the one that will implement generics in a real type safe way rather than with type erasure).&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3 id=&quot;factory-methods-for-making-immutable-collections&quot;&gt;Factory methods for making immutable collections&lt;/h3&gt;

&lt;p&gt;One of the most loved and hated Scala feature is its collection library. In case of JDK 9 it has nothing to fear about. Making immutable collections have become less tedious, though the choice of factory methods instead of constructors is questionable if you ask me. The most frequent use case for Google’s Guava (apart from the magnificent CacheBuilder which we often use with Scala) is fully covered now by the Java core functionality in my opinion.&lt;/p&gt;

&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;java&quot;&gt;List immutableList = List.of();
List&amp;lt;String&amp;gt; immutableList = List.of(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;)
Map emptyImmutableMap = Map.of()
Map nonemptyImmutableMap = Map.of(1,&quot;one&quot;,2,&quot;two&quot;,3,&quot;three&quot;)&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3 id=&quot;ecma6-features-in-nashhorn&quot;&gt;ECMA6 features in Nashhorn&lt;/h3&gt;

&lt;p&gt;We use Nashhorn and JVM-based scripting quite often, therefore having ECMA6 features like arrow function and block scope will be very helpful.&lt;/p&gt;

&lt;p&gt;Unfortunately, in every JDK9 build I tried I couldn’t find features promised in the corresponding &lt;a href=&quot;http://openjdk.java.net/jeps/292&quot;&gt;JEP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let me list them so we could hope to see it in the near feature with a minor update.&lt;/p&gt;

&lt;p&gt;Promised during the initial update&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Template strings&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt;, and block scope&lt;/li&gt;
  &lt;li&gt;Iterators and &lt;code class=&quot;highlighter-rouge&quot;&gt;for..of&lt;/code&gt; loops&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Set&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;WeakMap&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;WeakSet&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Symbols&lt;/li&gt;
  &lt;li&gt;Binary and octal literals&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Promised with later updates&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Arrow functions&lt;/li&gt;
  &lt;li&gt;Enhanced object literals&lt;/li&gt;
  &lt;li&gt;Destructuring assignment&lt;/li&gt;
  &lt;li&gt;Default, rest, and spread parameters&lt;/li&gt;
  &lt;li&gt;Unicode&lt;/li&gt;
  &lt;li&gt;Subclassable built-ins&lt;/li&gt;
  &lt;li&gt;Promises&lt;/li&gt;
  &lt;li&gt;Proxies&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Math&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt; APIs&lt;/li&gt;
  &lt;li&gt;Reflection API&lt;/li&gt;
  &lt;li&gt;Classes&lt;/li&gt;
  &lt;li&gt;Generators&lt;/li&gt;
  &lt;li&gt;Modules&lt;/li&gt;
  &lt;li&gt;Module loaders&lt;/li&gt;
  &lt;li&gt;Tail calls&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;http2-client-with-websockets&quot;&gt;Http/2 client with websockets&lt;/h3&gt;

&lt;p&gt;Though not as useful as Spray-can and its later reborn as Akka-http-client this version of out of the box http client for Java has finally managed to use Http version 2 as well as WebSockets. This is really helpful as it will allow to get rid of nasty includes of Apache Commons and Spring for the single purpose to do a http call… like we do in 2017. Did I say that it also has an asynchronous API?&lt;/p&gt;

&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;java&quot;&gt;import java.net.http.*

import static java.net.http.HttpRequest.*

import static java.net.http.HttpResponse.*

URI uri = new URI(&quot;http://grandparade.co.uk/blog&quot;)

HttpResponse response = HttpRequest.create(uri).body(noBody()).GET().response()

System.out.println(&quot;Response was &quot; + response.body(asString()))&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3 id=&quot;private-methods-in-interfaces&quot;&gt;&lt;strong&gt;Private methods in interfaces&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This is the feature that looks to me as an attempt to chase the  Scala’s trait features. In addition to the default method implementation in interfaces added in JDK8 this is the second step to make mixins available for Java developers.&lt;/p&gt;

&lt;p&gt;This is very handy for those who need to switch between Scala and Java quite often (like I do).&lt;/p&gt;

&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;java&quot;&gt;public interface Bear {
  private Long iterateTeeth() {
      return 42; 
  }
  private static void makeARoar(){
      System.out.println(&quot;GO BEARS GO!&quot;);
 }
}

&lt;/pre&gt;

&lt;h3 id=&quot;reactive-streams&quot;&gt;&lt;strong&gt;Reactive streams&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;I’m not exactly sure how this &lt;a href=&quot;https://community.oracle.com/docs/DOC-1006738&quot;&gt;feature&lt;/a&gt; will be adopted by the Java developers as we’ve seen a lot of traction towards JavaRx amongst them. Although lambdas provided by JDK8 allow to follow the reactive manifesto in Java easier than before, it’s still a long way to go to do this in Java&lt;/p&gt;

&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;java&quot;&gt;val o = Observable.interval(200 millis).take(5)
o.subscribe(n =&amp;gt; println(&quot;n = &quot; + n))
Observable.just(1, 2, 3, 4).reduce(_ + _)&lt;/pre&gt;

&lt;p&gt;However, this is also fine written with the Flow API provided by JDK 9&lt;/p&gt;

&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;java&quot;&gt;import java.util.concurrent.SubmissionPublisher;  
...  
    //Create Publisher  
    SubmissionPublisher&amp;lt;String&amp;gt; publisher = new SubmissionPublisher&amp;lt;&amp;gt;();  
  
    //Register Subscriber  
    MySubscriber&amp;lt;String&amp;gt; subscriber = new MySubscriber&amp;lt;&amp;gt;();  
    publisher.subscribe(subscriber);  
  
    //Publish items  
    System.out.println(&quot;Publishing Items...&quot;);  
    String[] items = {&quot;1&quot;, &quot;x&quot;, &quot;2&quot;, &quot;x&quot;, &quot;3&quot;, &quot;x&quot;};  
    Arrays.asList(items).stream().forEach(i -&amp;gt; publisher.submit(i));  
    publisher.close();&lt;/pre&gt;

&lt;p&gt;Such primitives of the Flow API will be given during the initial release:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;java.util.concurrent.Flow&lt;/li&gt;
  &lt;li&gt;java.util.concurrent.Flow.Publisher&lt;/li&gt;
  &lt;li&gt;java.util.concurrent.Flow.Subscriber&lt;/li&gt;
  &lt;li&gt;java.util.concurrent.Flow.Processor&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;multi-release-jars&quot;&gt;Multi-release jars&lt;/h3&gt;

&lt;p&gt;By releasing multi-release jars Java committee is planning to address the pain you have to go through while upgrading a JVM version by providing compiled classes for every JVM version they might be executed on.&lt;/p&gt;

&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;shell&quot;&gt;jar root
  - A.class
  - B.class
  - C.class
  - D.class
  - META-INF
     - versions
        - 9
           - A.class
           - B.class
        - 10
           - A.class&lt;/pre&gt;

&lt;p&gt;Let’s say your API has been compiled with the JDK 10, but for those retrogrades who are still using JDK 9 you can provide their own oldschool version of your class inside your jar file with no effort from the user’s side.&lt;/p&gt;

&lt;p&gt;This feature makes my unicorn very happy.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;aligncenter &quot; src=&quot;https://media.giphy.com/media/WZmgVLMt7mp44/giphy.gif&quot; width=&quot;345&quot; height=&quot;345&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;aot-compilation&quot;&gt;AOT Compilation&lt;/h3&gt;

&lt;p&gt;This feature addresses those apps that have grown so massive that the JIT compiler takes time to warm-up and fill its caches. The idea is to have your code already compiled to bytecode before  starting your application to make the bootstrap of both big and small apps as agile as it could possibly be.&lt;/p&gt;

&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;java&quot;&gt;//first you compile it with the new jaotc compiler
jaotc --output libHelloWorld.so HelloWorld.class
//Then specify generated AOT library during its execution
java -XX:AOTLibrary=./libHelloWorld.so HelloWorld&lt;/pre&gt;

&lt;p&gt;There’s a lengthy &lt;a href=&quot;https://news.ycombinator.com/item?id=12807906&quot;&gt;thread&lt;/a&gt; on HN that explains all pros and cons of that feature, but during my small experiments I haven’t noticed any big difference. Scala compiler still takes the longest time to finish its compilation process in comparison with javac and jaotc. Theoretically, this feature might be a game changer for small apps like test Java packs that are eager to start as soon as possible with no need to wait until the caches get warm.&lt;/p&gt;

&lt;h3 id=&quot;g1-garbage-collector&quot;&gt;G1 Garbage collector&lt;/h3&gt;

&lt;p&gt;G1 collector has been added some time ago, so now after a long improvement &amp;amp; refinement process, it’s going to be the default GC as well as it’s one of the only two that are available for the jaotc compiler.&lt;/p&gt;

&lt;p&gt;In my personal experience not having to think about what GC you’re using and which options of it to tune to get the most performance is actually a great thing as it allows you to stand on the shoulders of giants.&lt;/p&gt;

&lt;p&gt;In my personal experience G1 makes the smallest GC pauses as well as it has the most throughput in comparison with parallel and CMS garbage collector.&lt;/p&gt;

&lt;h3 id=&quot;modules&quot;&gt;Modules&lt;/h3&gt;

&lt;p&gt;One of the most awaited features of the new JDK is the “&lt;a href=&quot;http://openjdk.java.net/projects/jigsaw/talks/intro-modular-dev-j1-2015.pdf&quot;&gt;Jigsaw&lt;/a&gt;” project that was promised to use since java7 six long years ago.&lt;/p&gt;

&lt;p&gt;JDK 9 will introduce such parts of it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Modular JDK&lt;/li&gt;
  &lt;li&gt;Modular Java Source Code&lt;/li&gt;
  &lt;li&gt;Modular Run-time Images&lt;/li&gt;
  &lt;li&gt;Encapsulate Java Internal APIs&lt;/li&gt;
  &lt;li&gt;Java Platform Module System&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The bottom line is that you will be able to release your app in multiple jars by splitting it into modules and encapsulating each one into its own file. The JDK9 itself will be released in 92 modules (this number may change for the final release).&lt;/p&gt;

&lt;p&gt;Unfortunately, sbt and scalac don’t support modules at that moment.&lt;/p&gt;

&lt;h2&gt;#&lt;/h2&gt;
</description>
        <pubDate>Thu, 13 Apr 2017 22:02:16 +0200</pubDate>
        <link>javabean.ru//?p=913</link>
        <guid isPermaLink="true">javabean.ru//?p=913</guid>
        
        
        <category>stuff</category>
        
      </item>
    
      <item>
        <title>Ansible for DevOps book review</title>
        <description>&lt;p&gt;&lt;img class=&quot;alignleft size-medium&quot; src=&quot;https://www.ansiblefordevops.com/images/ansible-for-devops-cover.jpg&quot; width=&quot;301&quot; height=&quot;391&quot; /&gt;I was given this book, which is an uncommon event for me as I usually buy all books by myself. Moreover, I was given a paper version of the book.&lt;/p&gt;

&lt;p&gt;Therefore, there were absolutely no regrets regarding this book =) The book is concise and covers almost all parts of Ansible I’ve ever heard of. The only exception was the case when you need to deal with a server that’s under a jump host/bastion, which is very common for cloud deployments as they usually are done in a VPC network of some kind that not exposed to the outer world.&lt;/p&gt;

&lt;p&gt;This book has plenty of handful examples, but the most useful thing in it were not them.  The book covers some of the most undervalued parts of the Ansible ecosystem: Ansible Galaxy, Tower and it also has a decent set of invaluable pattern and best practices for writing your playbooks.&lt;/p&gt;

&lt;p&gt;My score: 5/5, I’m not sure if you need to read anything more than this book if you plan to use Ansible professionally.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;aligncenter size-medium&quot; src=&quot;http://www.neatnikcleaning.com/wp-content/uploads/2015/11/5-stars-300x300.jpg&quot; width=&quot;300&quot; height=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
        <pubDate>Thu, 06 Apr 2017 15:10:40 +0200</pubDate>
        <link>javabean.ru//?p=910</link>
        <guid isPermaLink="true">javabean.ru//?p=910</guid>
        
        
        <category>books</category>
        
      </item>
    
      <item>
        <title>Puppet Essentials book review</title>
        <description>&lt;p&gt;&lt;img class=&quot;alignleft &quot; src=&quot;https://www.packtpub.com/sites/default/files/7481OS_cov_0.jpg&quot; width=&quot;169&quot; height=&quot;209&quot; /&gt;The book provides only a shallow knowledge of Puppet, doesn’t cover some of the most important modules you’ll need in the real world as well as it doesn’t provide practical examples.&lt;/p&gt;

&lt;p&gt;I will recommend it only if you need to quickly brush up the technical details of Puppet’s architecture or you need to start using it quickly rather than spending some time on playing with examples its documentation provides&lt;/p&gt;

&lt;p&gt;My score: 3/5&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;aligncenter size-medium&quot; src=&quot;http://www.clipartkid.com/images/281/clipartbest-com-3IENXO-clipart.png&quot; width=&quot;3000&quot; height=&quot;700&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Apr 2017 22:48:41 +0200</pubDate>
        <link>javabean.ru//?p=904</link>
        <guid isPermaLink="true">javabean.ru//?p=904</guid>
        
        
        <category>books</category>
        
      </item>
    
  </channel>
</rss>
